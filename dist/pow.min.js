/**
 * @license MIT
 * @author IFYates <https://github.com/ifyates/pow.js>
 * @description A very small and lightweight templating framework.
 * @version 1.1.0
 */
function t(t,e=["item","array","if","ifnot"]){for(let n of e){let e=t.getAttribute(n);if(null!=e)return t.removeAttribute(n),{attr:n,token:e}}return{}}let e=/\{\{\s*(.*?)\s*\}\}/s;function n(t,n,o){for(;o=e.exec(t);){let i=r(o[1],n)??"";e.lastIndex=o.index+`${i}`.length,t=t.slice(0,o.index)+i+t.slice(o.index+o[0].length)}return t}function r(t,e,n=t){try{let r="*"==t[0]&&(n=t.slice(1))?e:e?.data,o=f._eval(n,r);if("function"==typeof o){let t=`_${Math.random().toString(36).slice(2)}`;return window.$pow$[t]=t=>o.call(t,e.data,e.root),`$pow$.${t}(this)`}return o}catch(n){console.warn("Interpolation failed",{"*path":e.path,token:t},n)}}function o(e,n){if(e?.attributes.pow){let{attr:r,token:o}=t(e,["else-if","else-ifnot","else"]);if(r&&n)return e.remove(),!0;r&&"else"!=r&&e.setAttribute(r.slice(5),o)}}let i=t=>(t.content??t).querySelector("*[pow]:not([pow] [pow])");function a(e,s){let{attr:f,token:l}=t(e),c=l?r(l,s):s.data;if("if"==f||"ifnot"==f){for(;o(e.nextElementSibling,"if"==f!=!c););if("if"==f==!c)return e.remove()}else if("item"==f&&l)s={...s,path:`${s.path}.${l}`,data:c,parent:s.data};else if("array"==f&&"object"==typeof c){let t=Array.isArray(c)?c:Object.entries(c).map((([t,e])=>({key:t,value:e})));for(let n=0;n<t.length;++n){let r=e.cloneNode(1);e.parentNode.insertBefore(r,e),a(r,{...s,path:`${s.path}${l?`.${l}`:""}[${n}]`,index:n,first:!n,last:n>t.length-2,data:t[n],parent:s})}return e.remove()}var p;for(e.removeAttribute("pow");p=i(e);)a(p,s);for(let{name:t,value:r}of e.attributes)e.setAttribute(t,n(r,s));let u=n(e.innerHTML,s);e instanceof HTMLTemplateElement?(e.insertAdjacentHTML("afterend",u),e.remove()):e.innerHTML=u}function s(t){let e=t.innerHTML,n=[...t.attributes],r={apply:o=>{if(r.$pow)return console.warn("Binding already in progress");r.$pow=1,window.$pow$={},t.innerHTML=e;for(let{name:e,value:r}of n)t.setAttribute(e,r);return a(t,{path:"*root",data:o,root:o}),delete r.$pow,r.refresh=()=>r.apply(o),r},refresh:()=>{}};return r}let f={apply:(t,e)=>s(t).apply(e),bind:s,_eval:(t,e)=>(e=Object.entries(e||{}).filter((t=>isNaN(t[0]))),new Function(...e.map((t=>t[0])),`return ${t}`)(...e.map((t=>t[1]))))};export default f;