/**
 * @license MIT
 * @author IFYates <https://github.com/ifyates/pow.js>
 * @description A very small and lightweight templating framework.
 * @version 1.4.0
 */
let e=(e,t=["if","ifnot","item","array","template"])=>{for(let r of t.filter((t=>e.hasAttribute(t)))){let t=e.getAttribute(r);return e.removeAttribute(r),{attr:r,expr:t}}return 0},t=e=>(e.content??e).querySelector("*[pow]:not([pow] [pow])"),r=(e,t)=>e.replace(/\{\{\s*(.*?)\s*\}\}/gs,((e,r)=>n(r,t)??"")),n=(e,t,r=e)=>{try{let n="*"==e[0]&&(r=e.slice(1))?t:t.data,a=s._eval(r,n);if("function"==typeof a){let e=`_${Math.random().toString(36).slice(2)}`;return window.$pow$[e]=e=>a.call(e,t.data,t.root),`$pow$.${e}(this)`}return a}catch(r){console.warn("Interpolation failed",{"*path":t.path,expr:e},r)}},a=(t,r)=>{if(t?.attributes.pow){let{attr:n,expr:a}=e(t,["else-if","else-ifnot","else"]);if(n&&r)return!t.remove();n&&"else"!=n&&t.setAttribute(n.slice(5),a)}},o=(e,t,r)=>{for(;a(e.nextElementSibling,t););return(r||!t)&&e.remove()},i=(a,l,s)=>{let{attr:p,expr:c}=e(a);if("template"==p&&(s=document.getElementById(c))){let e=s.cloneNode(1);return a.parentNode.replaceChild(e,a),i(e,l)}if(s=c?n(c,l):l.data,"if"==p||"ifnot"==p)return o(a,"if"==p!=!s);if("item"==p&&c){if(null==s)return a.remove();l={...l,path:`${l.path}.${c}`,data:s,parent:l.data}}else if("array"==p){s=!s||Array.isArray(s)?s:Object.entries(s).map((([e,t])=>({key:e,value:t})));for(let e=0;e<s?.length;++e){let t=a.cloneNode(1);a.parentNode.insertBefore(t,a),i(t,{...l,path:`${l.path}${c?`.${c}`:""}[${e}]`,index:e,first:!e,last:e>s.length-2,data:s[e],parent:l})}return o(a,s?.length,1)}for(a.removeAttribute("pow");s=t(a);)i(s,l);for(let{name:e,value:t}of[...a.attributes])"$"==e[0]?(a.removeAttribute(e),(t=n(t,l))&&a.setAttribute(e.slice(1),t)):(t=r(t,l)||"")?a.setAttribute(e,t):a.removeAttribute(e);s=r(a.innerHTML,l),a instanceof HTMLTemplateElement?(a.insertAdjacentHTML("afterend",s),a.remove()):a.innerHTML=s},l=e=>{let t=e.innerHTML,r=[...e.attributes],n={apply:a=>n.$pow?console.warn("Binding already in progress"):(n.$pow=1,window.$pow$={},e.innerHTML=t,r.forEach((t=>e.setAttribute(t.name,t.value))),i(e,{path:"*root",data:a,root:a}),delete n.$pow,n.refresh=()=>n.apply(a),n),refresh:()=>{}};return n},s={apply:(e,t)=>l(e).apply(t),bind:l,_eval:(e,t)=>{let r=Object.entries(t||{}).filter((e=>isNaN(e[0])));return new Function(...r.map((e=>e[0])),`return ${e}`).call(t,...r.map((e=>e[1])))}};export default s;